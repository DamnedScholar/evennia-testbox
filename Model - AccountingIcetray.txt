|  Help on AccountingIcetray in module sr5.models object:
|  class AccountingIcetray(django.db.models.base.Model)
|  The long-term storage log, using a Django DB model. This is not supposed to
|  be called directly, but will be used by Ledger to offload old data that
|  we don't want to cache.
|
|  Method resolution order:
|  AccountingIcetray
|  django.db.models.base.Model
|  __builtin__.object
|
|  Methods defined here:
|
|  get_next_by_db_date_created = _curried(*moreargs, **morekwargs)
|
|  get_previous_by_db_date_created = _curried(*moreargs, **morekwargs)
|
|  objects = <django.db.models.manager.Manager object>
|  ----------------------------------------------------------------------
|  Data and other attributes defined here:
|
|  DoesNotExist = <class 'sr5.models.DoesNotExist'>
|
|
|  MultipleObjectsReturned = <class 'sr5.models.MultipleObjectsReturned'>
|
|
|  ----------------------------------------------------------------------
|  Methods inherited from django.db.models.base.Model:
|
|  __eq__(self, other)
|
|  __hash__(self)
|
|  __init__(self, *args, **kwargs)
|
|  __ne__(self, other)
|
|  __reduce__(self)
|  Provides pickling support. Normally, this just dispatches to Python's
|  standard handling. However, for models with deferred field loading, we
|  need to do things manually, as they're dynamically created classes and
|  only module-level classes can be pickled by the default path.
|  __repr__(self)
|
|  __setstate__(self, state)
|
|  __str__(self)
|
|  clean(self)
|  Hook for doing any extra model-wide validation after clean() has been
|  called on every field by self.clean_fields. Any ValidationError raised
|  by this method will not be associated with a particular field; it will
|  have a special-case association with the field defined by NON_FIELD_ERRORS.
|
|  clean_fields(self, exclude=None)
|  Cleans all fields and raises a ValidationError containing a dict
|  of all validation errors if any occur.
|
|  date_error_message(self, lookup_type, field_name, unique_for)
|
|  delete(self, using=None, keep_parents=False)
|  
|  full_clean(self, exclude=None, validate_unique=True)
|  Calls clean_fields, clean, and validate_unique, on the model, and raises a ``ValidationError`` for any errors that occurred.
|  get_deferred_fields(self)
|  Returns a set containing names of deferred fields for this instance.
|
|  prepare_database_save(self, field)
|
|  refresh_from_db(self, using=None, fields=None, **kwargs)
|  Reloads field values from the database.
|
|  By default, the reloading happens from the database this instance was
|  loaded from, or by the read router if this instance wasn't loaded from
|  any database. The using parameter will override the default.
|
|  Fields can be used to specify which fields to reload. The fields
|  should be an iterable of field attnames. If fields is None, then
|  all non-deferred fields are reloaded.
|
|  When accessing deferred fields of an instance, the deferred loading
|  of the field will call this method.
|
|  save(self, force_insert=False, force_update=False, using=None, update_fields=None)
|  Saves the current instance. Override this in a subclass if you want to
|  control the saving process.
|
|  The 'force_insert' and 'force_update' parameters can be used to insist
|  that the "save" must be an SQL insert or update (or equivalent for
|  non-SQL backends), respectively. Normally, they should not be set.
|
|  save_base(self, raw=False, force_insert=False, force_update=False, using=None, update_fields=None)
|  Handles the parts of saving which should be done only once per save,
|  yet need to be done in raw saves, too. This includes some sanity
|  checks and signal sending.
|
|  The 'raw' argument is telling save_base not to save any parentmodels and not to do any changes to the values before save. This
|  is used by fixture loading.
|
|  serializable_value(self, field_name)
|  Returns the value of the field name for this instance. If the field is
|  a foreign key, returns the id value, instead of the object. If there's
|  no Field object with this name on the model, the model attribute's
|  value is returned directly.
|
|  Used to serialize a field's value (in the serializer, or form output,
|  for example). Normally, you would just access the attribute directly
|  and not use this method.
|
|  unique_error_message(self, model_class, unique_check)
|
|  validate_unique(self, exclude=None)
|  Checks unique constraints on the model and raises ``ValidationError``
|  if any failed.
|
|  ----------------------------------------------------------------------
|  Class methods inherited from django.db.models.base.Model:
|
|  check(cls, **kwargs) from django.db.models.base.ModelBase
|
|  from_db(cls, db, field_names, values) from django.db.models.base.ModelBase
|
|  ----------------------------------------------------------------------
|  Data descriptors inherited from django.db.models.base.Model:
|
|  __dict__
|  dictionary for instance variables (if defined)
|
|  __weakref__
|  list of weak references to the object (if defined)
|
|  pk
